#!/usr/bin/env python3
"""
Script de Configura√ß√£o Autom√°tica do Railway
Resolve problemas de login usando modo browserless
"""

import subprocess
import sys
import os
import time
import json
from datetime import datetime

class RailwayDeployer:
    def __init__(self):
        self.start_time = datetime.now()
        self.steps_completed = []
        self.errors = []
        
    def log(self, message, status="INFO"):
        """Log com timestamp e status"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        if status == "SUCCESS":
            print(f"‚úÖ {message}")
        elif status == "ERROR":
            print(f"‚ùå {message}")
        elif status == "PROGRESS":
            print(f"üîÑ {message}")
        elif status == "INFO":
            print(f"üîç {message}")
        else:
            print(f"üìã {message}")
            
    def run_command(self, command, capture_output=True, timeout=30):
        """Executa comando com tratamento de erro"""
        try:
            if capture_output:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=timeout
                )
                return result.returncode == 0, result.stdout, result.stderr
            else:
                result = subprocess.run(command, shell=True, timeout=timeout)
                return result.returncode == 0, "", ""
        except subprocess.TimeoutExpired:
            return False, "", f"Timeout ap√≥s {timeout}s"
        except Exception as e:
            return False, "", str(e)
            
    def check_railway_cli(self):
        """Verifica se Railway CLI est√° instalada"""
        self.log("Verificando Railway CLI...")
        success, output, error = self.run_command("railway --version")
        
        if success:
            version = output.strip()
            self.log(f"Railway CLI encontrada: {version}", "SUCCESS")
            return True
        else:
            self.log("Railway CLI n√£o est√° instalada", "ERROR")
            return False
            
    def install_railway_cli(self):
        """Instala Railway CLI"""
        self.log("Tentando instalar Railway CLI...", "PROGRESS")
        
        # Comando de instala√ß√£o para macOS
        install_cmd = "curl -fsSL https://railway.app/install.sh | sh"
        
        self.log("Instalando Railway CLI...")
        success, output, error = self.run_command(install_cmd, timeout=120)
        
        if success:
            self.log("Railway CLI instalada com sucesso", "SUCCESS")
            # Adicionar ao PATH se necess√°rio
            os.environ['PATH'] = f"/Users/{os.getenv('USER')}/.railway/bin:" + os.environ['PATH']
            return True
        else:
            self.log(f"Erro ao instalar Railway CLI: {error}", "ERROR")
            return False
            
    def login_railway_browserless(self):
        """Faz login no Railway usando modo browserless"""
        self.log("Fazendo login no Railway (modo browserless)...", "PROGRESS")
        
        # Usar modo browserless conforme sugerido no erro
        login_cmd = "railway login --browserless"
        
        self.log("üîê Executando login browserless...")
        self.log("üìã Siga as instru√ß√µes que aparecer√£o no terminal")
        
        # Executar comando sem capturar output para permitir intera√ß√£o
        success, output, error = self.run_command(login_cmd, capture_output=False, timeout=300)
        
        if success:
            self.log("Login realizado com sucesso", "SUCCESS")
            return True
        else:
            self.log(f"Erro no login: {error}", "ERROR")
            return False
            
    def verify_login(self):
        """Verifica se o login foi bem-sucedido"""
        self.log("Verificando status do login...")
        success, output, error = self.run_command("railway whoami")
        
        if success and output.strip():
            self.log(f"Usu√°rio logado: {output.strip()}", "SUCCESS")
            return True
        else:
            self.log("Login n√£o verificado", "ERROR")
            return False
            
    def list_projects(self):
        """Lista projetos dispon√≠veis"""
        self.log("Listando projetos dispon√≠veis...")
        success, output, error = self.run_command("railway projects")
        
        if success:
            self.log("Projetos encontrados:", "SUCCESS")
            print(output)
            return True
        else:
            self.log(f"Erro ao listar projetos: {error}", "ERROR")
            return False
            
    def connect_project(self, project_name=None):
        """Conecta a um projeto espec√≠fico"""
        if project_name:
            self.log(f"Conectando ao projeto: {project_name}...", "PROGRESS")
            cmd = f"railway link {project_name}"
        else:
            self.log("Conectando ao projeto (sele√ß√£o interativa)...", "PROGRESS")
            cmd = "railway link"
            
        success, output, error = self.run_command(cmd, capture_output=False, timeout=60)
        
        if success:
            self.log("Projeto conectado com sucesso", "SUCCESS")
            return True
        else:
            self.log(f"Erro ao conectar projeto: {error}", "ERROR")
            return False
            
    def set_environment_variables(self):
        """Configura vari√°veis de ambiente essenciais"""
        self.log("Configurando vari√°veis de ambiente...", "PROGRESS")
        
        # Vari√°veis essenciais para o sistema de email
        env_vars = {
            "FLASK_ENV": "production",
            "FLASK_DEBUG": "False",
            "SMTP_SERVER": "smtp.gmail.com",
            "SMTP_PORT": "587",
            "SMTP_USE_TLS": "True",
            "EMAIL_BACKEND": "smtp",
            "RESEND_API_KEY": "re_placeholder_key",
            "SENDGRID_API_KEY": "SG.placeholder_key",
            "ADMIN_EMAIL": "admin@example.com",
            "SUPPORT_EMAIL": "support@example.com",
            "DATABASE_URL": "sqlite:///app.db",
            "SECRET_KEY": "railway-secret-key-2024",
            "UPLOAD_FOLDER": "/tmp/uploads",
            "MAX_CONTENT_LENGTH": "16777216"
        }
        
        success_count = 0
        for key, value in env_vars.items():
            cmd = f'railway variables set {key}="{value}"'
            success, output, error = self.run_command(cmd)
            
            if success:
                self.log(f"‚úÖ {key} configurada")
                success_count += 1
            else:
                self.log(f"‚ùå Erro ao configurar {key}: {error}", "ERROR")
                
        self.log(f"Vari√°veis configuradas: {success_count}/{len(env_vars)}", "SUCCESS")
        return success_count > len(env_vars) * 0.7  # 70% de sucesso m√≠nimo
        
    def deploy_project(self):
        """Faz deploy do projeto"""
        self.log("Iniciando deploy...", "PROGRESS")
        
        # Deploy usando Railway
        cmd = "railway up --detach"
        success, output, error = self.run_command(cmd, timeout=300)
        
        if success:
            self.log("Deploy iniciado com sucesso", "SUCCESS")
            self.log("üìã Aguardando conclus√£o do deploy...")
            
            # Aguardar deploy
            time.sleep(30)
            
            # Verificar status
            status_success, status_output, status_error = self.run_command("railway status")
            if status_success:
                self.log("Status do deploy:", "SUCCESS")
                print(status_output)
                
            return True
        else:
            self.log(f"Erro no deploy: {error}", "ERROR")
            return False
            
    def run_final_test(self):
        """Executa teste final do sistema"""
        self.log("Executando teste final...", "PROGRESS")
        
        # Verificar se o servi√ßo est√° rodando
        cmd = "railway logs --tail 10"
        success, output, error = self.run_command(cmd)
        
        if success:
            self.log("Logs do servi√ßo:", "SUCCESS")
            print(output)
            
            # Verificar URL do servi√ßo
            url_cmd = "railway domain"
            url_success, url_output, url_error = self.run_command(url_cmd)
            
            if url_success and url_output.strip():
                service_url = url_output.strip()
                self.log(f"üåê Servi√ßo dispon√≠vel em: {service_url}", "SUCCESS")
                
                # Teste b√°sico de conectividade
                test_cmd = f"curl -s -o /dev/null -w '%{{http_code}}' {service_url}/api/health"
                test_success, test_output, test_error = self.run_command(test_cmd)
                
                if test_success and test_output.strip() == "200":
                    self.log("‚úÖ Teste de conectividade: PASSOU", "SUCCESS")
                    return True
                else:
                    self.log(f"‚ö†Ô∏è Teste de conectividade: Status {test_output}", "ERROR")
                    
            return True
        else:
            self.log(f"Erro ao verificar logs: {error}", "ERROR")
            return False
            
    def generate_report(self):
        """Gera relat√≥rio final"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        print("\n" + "="*60)
        print("üìä RELAT√ìRIO FINAL - CONFIGURA√á√ÉO RAILWAY")
        print("="*60)
        print(f"‚è∞ Iniciado em: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è∞ Conclu√≠do em: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è Dura√ß√£o total: {duration}")
        print(f"‚úÖ Etapas conclu√≠das: {len(self.steps_completed)}")
        print(f"‚ùå Erros encontrados: {len(self.errors)}")
        
        if self.steps_completed:
            print("\nüìã Etapas Conclu√≠das:")
            for step in self.steps_completed:
                print(f"  ‚úÖ {step}")
                
        if self.errors:
            print("\n‚ùå Erros Encontrados:")
            for error in self.errors:
                print(f"  ‚ùå {error}")
                
        print("\nüéØ Pr√≥ximos Passos:")
        print("  1. Verificar se todas as vari√°veis de ambiente est√£o corretas")
        print("  2. Configurar chaves de API reais (RESEND_API_KEY, SENDGRID_API_KEY)")
        print("  3. Testar envio de emails em produ√ß√£o")
        print("  4. Monitorar logs do Railway para poss√≠veis erros")
        print("="*60)
        
    def run(self):
        """Executa todo o processo de configura√ß√£o"""
        print("üöÄ CONFIGURA√á√ÉO AUTOM√ÅTICA DO RAILWAY")
        print("=" * 50)
        print(f"‚è∞ Iniciado em: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        try:
            # Etapa 1: Verificar Railway CLI
            self.log("Verificar Railway CLI...", "PROGRESS")
            if not self.check_railway_cli():
                if not self.install_railway_cli():
                    self.errors.append("Falha na instala√ß√£o da Railway CLI")
                    return False
                    
            if not self.check_railway_cli():
                self.errors.append("Railway CLI n√£o funciona ap√≥s instala√ß√£o")
                return False
                
            self.steps_completed.append("Verificar Railway CLI")
            self.log("Verificar Railway CLI: Conclu√≠do", "SUCCESS")
            
            # Etapa 2: Login (modo browserless)
            self.log("Fazer login no Railway...", "PROGRESS")
            if not self.login_railway_browserless():
                self.errors.append("Falha no login do Railway")
                return False
                
            # Verificar login
            if not self.verify_login():
                self.errors.append("Login n√£o verificado")
                return False
                
            self.steps_completed.append("Login no Railway")
            self.log("Login no Railway: Conclu√≠do", "SUCCESS")
            
            # Etapa 3: Listar e conectar projeto
            self.log("Conectar ao projeto...", "PROGRESS")
            self.list_projects()
            
            if not self.connect_project():
                self.errors.append("Falha ao conectar projeto")
                return False
                
            self.steps_completed.append("Conectar projeto")
            self.log("Conectar projeto: Conclu√≠do", "SUCCESS")
            
            # Etapa 4: Configurar vari√°veis de ambiente
            self.log("Configurar vari√°veis de ambiente...", "PROGRESS")
            if not self.set_environment_variables():
                self.errors.append("Falha na configura√ß√£o de vari√°veis")
                return False
                
            self.steps_completed.append("Configurar vari√°veis")
            self.log("Configurar vari√°veis: Conclu√≠do", "SUCCESS")
            
            # Etapa 5: Deploy
            self.log("Fazer deploy...", "PROGRESS")
            if not self.deploy_project():
                self.errors.append("Falha no deploy")
                return False
                
            self.steps_completed.append("Deploy do projeto")
            self.log("Deploy: Conclu√≠do", "SUCCESS")
            
            # Etapa 6: Teste final
            self.log("Executar teste final...", "PROGRESS")
            if not self.run_final_test():
                self.errors.append("Falha no teste final")
                # N√£o retorna False aqui pois o deploy pode estar funcionando
                
            self.steps_completed.append("Teste final")
            self.log("Teste final: Conclu√≠do", "SUCCESS")
            
            return True
            
        except KeyboardInterrupt:
            self.log("\n‚ö†Ô∏è Processo interrompido pelo usu√°rio", "ERROR")
            return False
        except Exception as e:
            self.log(f"\n‚ùå Erro inesperado: {str(e)}", "ERROR")
            self.errors.append(f"Erro inesperado: {str(e)}")
            return False
        finally:
            self.generate_report()

if __name__ == "__main__":
    deployer = RailwayDeployer()
    success = deployer.run()
    
    if success:
        print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
        sys.exit(0)
    else:
        print("\n‚ùå CONFIGURA√á√ÉO FALHOU. Verifique os erros acima.")
        sys.exit(1)