#!/usr/bin/env python3
"""
ü•ë CONFIGURADOR ABACATEPAY
=========================

Script interativo para configurar credenciais AbacatePay
Facilita a configura√ß√£o das chaves de API

Autor: Sistema de Migra√ß√£o Autom√°tica
Data: 24 de Setembro de 2025
"""

import os
import sys
from pathlib import Path
import getpass

def print_header():
    """Exibir cabe√ßalho"""
    print("""
ü•ë CONFIGURADOR ABACATEPAY v1.0
==============================
Configure suas credenciais AbacatePay de forma segura
""")

def print_instructions():
    """Exibir instru√ß√µes"""
    print("""
üìã ANTES DE CONTINUAR:
1. Acesse: https://www.abacatepay.com/app/retiradas
2. Fa√ßa login com sua conta Google
3. V√° em 'API' ou 'Configura√ß√µes'
4. Copie sua API Key e Secret Key
5. Configure webhook (opcional): https://web-production-1513a.up.railway.app/api/abacatepay/webhook

üîí SUAS CREDENCIAIS SER√ÉO ARMAZENADAS LOCALMENTE DE FORMA SEGURA
""")

def get_current_config():
    """Obter configura√ß√£o atual"""
    env_file = Path(".env")
    current_config = {}
    
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    current_config[key] = value
    
    return current_config

def save_config(config):
    """Salvar configura√ß√£o no arquivo .env"""
    env_file = Path(".env")
    
    # Ler arquivo existente
    existing_lines = []
    if env_file.exists():
        with open(env_file, 'r') as f:
            existing_lines = f.readlines()
    
    # Remover linhas AbacatePay existentes
    filtered_lines = []
    for line in existing_lines:
        if not line.strip().startswith('ABACATEPAY_'):
            filtered_lines.append(line)
    
    # Adicionar novas configura√ß√µes AbacatePay
    abacatepay_section = [
        "\n# ü•ë AbacatePay Configuration\n",
        f"ABACATEPAY_API_KEY={config['api_key']}\n",
        f"ABACATEPAY_SECRET_KEY={config['secret_key']}\n",
        f"ABACATEPAY_WEBHOOK_SECRET={config['webhook_secret']}\n",
        f"ABACATEPAY_SANDBOX={config['sandbox']}\n",
        f"ABACATEPAY_BASE_URL={config['base_url']}\n"
    ]
    
    # Escrever arquivo atualizado
    with open(env_file, 'w') as f:
        f.writelines(filtered_lines)
        f.writelines(abacatepay_section)
    
    print(f"‚úÖ Configura√ß√£o salva em: {env_file.absolute()}")

def test_connection(config):
    """Testar conex√£o com AbacatePay"""
    print("\nüß™ TESTANDO CONEX√ÉO COM ABACATEPAY...")
    
    try:
        # Configurar vari√°veis de ambiente temporariamente
        os.environ['ABACATEPAY_API_KEY'] = config['api_key']
        os.environ['ABACATEPAY_SECRET_KEY'] = config['secret_key']
        os.environ['ABACATEPAY_WEBHOOK_SECRET'] = config['webhook_secret']
        os.environ['ABACATEPAY_SANDBOX'] = config['sandbox']
        os.environ['ABACATEPAY_BASE_URL'] = config['base_url']
        
        # Importar e testar
        from abacatepay_integration import AbacatePayConfig, AbacatePayClient
        
        abacate_config = AbacatePayConfig.from_env()
        client = AbacatePayClient(abacate_config)
        
        # Teste simples (health check se dispon√≠vel)
        print("‚úÖ M√≥dulos AbacatePay carregados com sucesso")
        print("‚úÖ Configura√ß√£o v√°lida")
        
        if config['sandbox'] == 'true':
            print("üß™ Modo: SANDBOX (Testes)")
        else:
            print("üöÄ Modo: PRODU√á√ÉO")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        print("üí° Verifique suas credenciais e tente novamente")
        return False

def main():
    """Fun√ß√£o principal"""
    print_header()
    print_instructions()
    
    # Verificar configura√ß√£o atual
    current_config = get_current_config()
    
    if current_config.get('ABACATEPAY_API_KEY') and current_config.get('ABACATEPAY_API_KEY') != 'your_api_key_here':
        print("‚ö†Ô∏è CONFIGURA√á√ÉO EXISTENTE DETECTADA:")
        print(f"   API Key: {current_config.get('ABACATEPAY_API_KEY', 'N√£o configurada')[:20]}...")
        print(f"   Sandbox: {current_config.get('ABACATEPAY_SANDBOX', 'N√£o configurado')}")
        
        reconfigure = input("\n‚ùì Deseja reconfigurar? (s/N): ").lower().strip()
        if reconfigure not in ['s', 'sim', 'y', 'yes']:
            print("‚úÖ Mantendo configura√ß√£o existente")
            return 0
    
    print("\nüîß CONFIGURA√á√ÉO DAS CREDENCIAIS:")
    print("=" * 40)
    
    # Coletar credenciais
    config = {}
    
    # API Key
    while True:
        api_key = getpass.getpass("üîë Digite sua API Key AbacatePay: ").strip()
        if api_key and len(api_key) > 10:
            config['api_key'] = api_key
            break
        else:
            print("‚ùå API Key inv√°lida. Deve ter mais de 10 caracteres.")
    
    # Secret Key
    while True:
        secret_key = getpass.getpass("üîê Digite sua Secret Key AbacatePay: ").strip()
        if secret_key and len(secret_key) > 10:
            config['secret_key'] = secret_key
            break
        else:
            print("‚ùå Secret Key inv√°lida. Deve ter mais de 10 caracteres.")
    
    # Webhook Secret (opcional)
    webhook_secret = getpass.getpass("üîî Digite seu Webhook Secret (opcional): ").strip()
    config['webhook_secret'] = webhook_secret if webhook_secret else 'webhook_secret_not_configured'
    
    # Modo sandbox
    while True:
        sandbox_mode = input("üß™ Usar modo SANDBOX/Teste? (S/n): ").lower().strip()
        if sandbox_mode in ['', 's', 'sim', 'y', 'yes']:
            config['sandbox'] = 'true'
            config['base_url'] = 'https://api.abacatepay.com/v1'
            break
        elif sandbox_mode in ['n', 'nao', 'n√£o', 'no']:
            config['sandbox'] = 'false'
            config['base_url'] = 'https://api.abacatepay.com/v1'
            break
        else:
            print("‚ùå Responda com 's' para sim ou 'n' para n√£o")
    
    print("\nüìã RESUMO DA CONFIGURA√á√ÉO:")
    print("=" * 30)
    print(f"API Key: {config['api_key'][:10]}...{config['api_key'][-4:]}")
    print(f"Secret Key: {config['secret_key'][:10]}...{config['secret_key'][-4:]}")
    print(f"Webhook: {'Configurado' if config['webhook_secret'] != 'webhook_secret_not_configured' else 'N√£o configurado'}")
    print(f"Modo: {'SANDBOX (Testes)' if config['sandbox'] == 'true' else 'PRODU√á√ÉO'}")
    print(f"Base URL: {config['base_url']}")
    
    # Confirmar
    confirm = input("\n‚úÖ Confirma a configura√ß√£o? (S/n): ").lower().strip()
    if confirm not in ['', 's', 'sim', 'y', 'yes']:
        print("‚ùå Configura√ß√£o cancelada")
        return 1
    
    # Salvar configura√ß√£o
    try:
        save_config(config)
        print("‚úÖ Configura√ß√£o salva com sucesso!")
        
        # Testar conex√£o
        if test_connection(config):
            print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("=" * 40)
            print("‚úÖ Credenciais AbacatePay configuradas")
            print("‚úÖ Conex√£o testada e funcionando")
            print("‚úÖ Sistema pronto para uso")
            
            print("\nüìã PR√ìXIMOS PASSOS:")
            print("1. Reinicie o servidor: python3 payment_api.py")
            print("2. Teste os endpoints AbacatePay")
            print("3. Configure webhook no dashboard AbacatePay")
            
            if config['sandbox'] == 'true':
                print("\nüß™ MODO TESTE ATIVO:")
                print("- Use dados de teste para transa√ß√µes")
                print("- Nenhuma cobran√ßa real ser√° feita")
                print("- Mude para produ√ß√£o quando estiver pronto")
            
            return 0
        else:
            print("\n‚ö†Ô∏è Configura√ß√£o salva, mas teste de conex√£o falhou")
            print("üí° Verifique suas credenciais no dashboard AbacatePay")
            return 1
            
    except Exception as e:
        print(f"\n‚ùå Erro ao salvar configura√ß√£o: {e}")
        return 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Configura√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
