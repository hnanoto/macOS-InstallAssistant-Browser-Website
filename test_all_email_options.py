#!/usr/bin/env python3
"""
Teste completo de todas as op√ß√µes de e-mail no Railway
"""

import requests
import json
import time

BASE_URL = "https://web-production-1513a.up.railway.app"

def test_sendgrid():
    """Teste 1: SendGrid"""
    print("üß™ Teste 1: SendGrid")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/debug/sendgrid-test", timeout=10)
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ SendGrid funcionando!")
            print(f"   Status: {result.get('status_code')}")
            print(f"   Mensagem: {result.get('message')}")
            return True
        else:
            print("‚ùå SendGrid falhou!")
            print(f"   Erro: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste SendGrid: {e}")
        return False

def test_notification_system():
    """Teste 2: Sistema de Notifica√ß√£o (Arquivo)"""
    print("\nüß™ Teste 2: Sistema de Notifica√ß√£o (Arquivo)")
    print("=" * 50)
    
    try:
        payload = {
            "email": "hackintoshandbeyond@gmail.com",
            "message": "Teste de notifica√ß√£o via arquivo"
        }
        
        response = requests.post(
            f"{BASE_URL}/api/debug/notification-test", 
            json=payload, 
            timeout=10
        )
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ Sistema de notifica√ß√£o funcionando!")
            print(f"   Mensagem: {result.get('message')}")
            print(f"   Notifica√ß√£o: {result.get('notification')}")
            return True
        else:
            print("‚ùå Sistema de notifica√ß√£o falhou!")
            print(f"   Erro: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de notifica√ß√£o: {e}")
        return False

def test_webhook_system():
    """Teste 3: Sistema de Webhook"""
    print("\nüß™ Teste 3: Sistema de Webhook")
    print("=" * 50)
    
    try:
        payload = {
            "message": "Teste de webhook para notifica√ß√µes"
        }
        
        response = requests.post(
            f"{BASE_URL}/api/debug/webhook-test", 
            json=payload, 
            timeout=10
        )
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ Sistema de webhook funcionando!")
            print(f"   Mensagem: {result.get('message')}")
            print(f"   URL: {result.get('webhook_url')}")
            return True
        else:
            print("‚ùå Sistema de webhook falhou!")
            print(f"   Erro: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de webhook: {e}")
        return False

def test_server_health():
    """Teste de sa√∫de do servidor"""
    print("üè• Testando sa√∫de do servidor...")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=5)
        result = response.json()
        
        if result.get('status') == 'healthy':
            print("‚úÖ Servidor funcionando!")
            print(f"   Vers√£o: {result.get('version')}")
            print(f"   Timestamp: {result.get('timestamp')}")
            return True
        else:
            print("‚ùå Servidor com problemas!")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de sa√∫de: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ TESTE COMPLETO DE TODAS AS OP√á√ïES DE E-MAIL")
    print("=" * 60)
    
    # Teste de sa√∫de
    server_ok = test_server_health()
    
    if not server_ok:
        print("\n‚ùå Servidor n√£o est√° funcionando. Abortando testes.")
        return
    
    # Testes das op√ß√µes
    results = {
        'sendgrid': test_sendgrid(),
        'notification': test_notification_system(),
        'webhook': test_webhook_system()
    }
    
    # Resultado final
    print("\n" + "=" * 60)
    print("üìä RESULTADO FINAL DOS TESTES:")
    print("=" * 60)
    
    for option, success in results.items():
        status = "‚úÖ FUNCIONANDO" if success else "‚ùå FALHOU"
        print(f"   {option.upper()}: {status}")
    
    # Recomenda√ß√£o
    working_options = [option for option, success in results.items() if success]
    
    if working_options:
        print(f"\nüéØ RECOMENDA√á√ÉO:")
        print(f"   Use: {', '.join(working_options).upper()}")
        
        if 'notification' in working_options:
            print("   üìù Sistema de notifica√ß√£o √© a op√ß√£o mais confi√°vel!")
        elif 'webhook' in working_options:
            print("   üì° Webhook √© uma boa alternativa!")
        elif 'sendgrid' in working_options:
            print("   üìß SendGrid funcionando perfeitamente!")
    else:
        print("\n‚ùå NENHUMA OP√á√ÉO FUNCIONANDO!")
        print("   Verifique a configura√ß√£o do Railway.")

if __name__ == "__main__":
    main()
